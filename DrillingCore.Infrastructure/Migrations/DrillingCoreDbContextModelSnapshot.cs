// <auto-generated />
using System;
using DrillingCore.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DrillingCore.Infrastructure.Migrations
{
    [DbContext(typeof(DrillingCoreDbContext))]
    partial class DrillingCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DrillingCore.Core.Entities.ChecklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormTypeId");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Drill"
                        });
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormChecklistResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChecklistItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectFormId")
                        .HasColumnType("integer");

                    b.Property<bool>("Response")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistItemId");

                    b.HasIndex("ProjectFormId");

                    b.ToTable("FormChecklistResponses");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttachDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DetachDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectFormId")
                        .HasColumnType("integer");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProjectFormId");

                    b.ToTable("FormParticipants");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("ProjectFormId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFormId");

                    b.ToTable("FormPhotos");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectFormId")
                        .HasColumnType("integer");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFormId");

                    b.ToTable("FormSignatures");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormTypes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Drill Inspection"
                        });
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormTypeEquipmentType", b =>
                {
                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.HasKey("FormTypeId", "EquipmentTypeId");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("FormTypeEquipmentTypes");

                    b.HasData(
                        new
                        {
                            FormTypeId = 2,
                            EquipmentTypeId = 1
                        });
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DailyRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MeterRate")
                        .HasColumnType("numeric");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCampOrHotel")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("CrewName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateFilled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherComments")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectForms");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProjectGroups");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Проект активный",
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Проект не активный",
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Проект приостановлен",
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Проект завершён",
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Driller"
                        },
                        new
                        {
                            Id = -3,
                            Name = "ProjectManager"
                        });
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            FullName = "Administrator",
                            IsActive = true,
                            Mobile = "1234567890",
                            PasswordHash = "admin",
                            RoleId = -1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DrillingCore.Domain.Entities.ParticipantEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ParticipantEquipments");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ChecklistItem", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormType");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Equipment", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.EquipmentType", "EquipmentType")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormChecklistResponse", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.ChecklistItem", "ChecklistItem")
                        .WithMany("Responses")
                        .HasForeignKey("ChecklistItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.ProjectForm", "ProjectForm")
                        .WithMany()
                        .HasForeignKey("ProjectFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChecklistItem");

                    b.Navigation("ProjectForm");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormParticipant", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.ProjectForm", "ProjectForm")
                        .WithMany()
                        .HasForeignKey("ProjectFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("ProjectForm");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormPhoto", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.ProjectForm", "ProjectForm")
                        .WithMany("FormPhotos")
                        .HasForeignKey("ProjectFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectForm");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormSignature", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.ProjectForm", "ProjectForm")
                        .WithMany("FormSignatures")
                        .HasForeignKey("ProjectFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectForm");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormTypeEquipmentType", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");

                    b.Navigation("FormType");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Participant", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.ProjectGroup", null)
                        .WithMany("Participants")
                        .HasForeignKey("GroupId");

                    b.HasOne("DrillingCore.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Project", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.ProjectStatus", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectForm", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.FormType", "FormType")
                        .WithMany("ProjectForms")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("FormType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.User", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DrillingCore.Domain.Entities.ParticipantEquipment", b =>
                {
                    b.HasOne("DrillingCore.Core.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillingCore.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Participant");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ChecklistItem", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.EquipmentType", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.FormType", b =>
                {
                    b.Navigation("ProjectForms");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectForm", b =>
                {
                    b.Navigation("FormPhotos");

                    b.Navigation("FormSignatures");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectGroup", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DrillingCore.Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
